{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFront configuration for front end API which permits notification that an update has occured infrastructure.",
  "Parameters": {},
  "Resources": {
    "UpdateNotifyLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowLambdaToAssume",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "LoggingPolicy",
            "PolicyDocument": {
              "Id": "LoggingPolicy",
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            }
          },
          {
            "PolicyName": "GetNotifierCredentialsFromSSM",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameter*"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/notify/*"
                    }
                  ]
                }
              ]
            }
          },
          {
            "PolicyName": "AllowNotifierToInvokeFetcher",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Resource": {
                    "Fn::ImportValue": "FetcherInvokeLambdaArn"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "UpdateNotifyLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "UpdateNotifyLambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::ImportValue": "LambdaBucket"
          },
          "S3Key": "notify-v01.zip"
        },
        "Runtime": "nodejs8.10",
        "Timeout": "300",
        "Environment": {
          "Variables": {
            "FetcherInvokerARN": {
              "Fn::ImportValue": "FetcherInvokeLambdaArn"
            }
          }
        }
      }
    },
    "UpdateNotifyLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${functionName}",
            {
              "functionName": {
                "Ref": "UpdateNotifyLambda"
              }
            }
          ]
        },
        "RetentionInDays": 7
      }
    },
    "UpdateNotifyLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateNotifyLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Fn::ImportValue": "StationeeringAPI"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "UpdateNotifyResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "ParentId": {
          "Fn::ImportValue": "StationeeringAPIRoot"
        },
        "PathPart": "notify"
      }
    },
    "UserUpdateNotifyResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "ParentId": {
          "Ref": "UpdateNotifyResource"
        },
        "PathPart": "{user}"
      }
    },
    "KeyUpdateNotifyResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "ParentId": {
          "Ref": "UserUpdateNotifyResource"
        },
        "PathPart": "{key}"
      }
    },
    "UpdateNotifyMethod": {
      "DependsOn": "UpdateNotifyLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "UpdateNotifyLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "$input.json('$.body')"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 201
            },
            {
              "SelectionPattern": "^Forbidden.*",
              "ResponseTemplates": {
                "application/json": "{}"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 403
            },
            {
              "SelectionPattern": "^Failure.*",
              "ResponseTemplates": {
                "application/json": "{}"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 500
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"parameters\": {\"user\": \"$input.params('user')\", \"key\": \"$input.params('key')\"}}"
          }
        },
        "RequestParameters": {
          "method.request.path.user": true,
          "method.request.path.key": true
        },
        "ResourceId": {
          "Ref": "KeyUpdateNotifyResource"
        },
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 201
          },
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 403
          },
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 500
          }
        ]
      }
    }
  },
  "Outputs": {}
}
