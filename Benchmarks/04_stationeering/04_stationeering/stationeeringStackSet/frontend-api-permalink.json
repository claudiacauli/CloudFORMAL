{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "CloudFront configuration for front end API permalink infrastructure.",
  "Parameters": {},
  "Resources": {
    "PermalinkTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "link",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "link",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "2",
          "WriteCapacityUnits": "1"
        },
        "TableName": "Permalinks",
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        }
      }
    },
    "PermalinkPublishLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowLambdaToAssume",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "DynamoDBPolicy",
            "PolicyDocument": {
              "Id": "DynamoDBPolicy",
              "Statement": [
                {
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "PermalinkTable",
                        "Arn"
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            }
          },
          {
            "PolicyName": "LoggingPolicy",
            "PolicyDocument": {
              "Id": "LoggingPolicy",
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            }
          }
        ]
      }
    },
    "PermalinkPublishLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "PermalinkPublishLambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::ImportValue": "LambdaBucket"
          },
          "S3Key": "permalink-publish-v04.zip"
        },
        "Runtime": "nodejs8.10",
        "Timeout": "300"
      }
    },
    "PermalinkPublishLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${functionName}",
            {
              "functionName": {
                "Ref": "PermalinkPublishLambda"
              }
            }
          ]
        },
        "RetentionInDays": 7
      }
    },
    "PermalinkPublishLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PermalinkPublishLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Fn::ImportValue": "StationeeringAPI"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PermalinkRetrieveLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "AllowLambdaToAssume",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "DynamoDBPolicy",
            "PolicyDocument": {
              "Id": "DynamoDBPolicy",
              "Statement": [
                {
                  "Action": [
                    "dynamodb:GetItem"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "PermalinkTable",
                        "Arn"
                      ]
                    }
                  ]
                }
              ],
              "Version": "2012-10-17"
            }
          },
          {
            "PolicyName": "LoggingPolicy",
            "PolicyDocument": {
              "Id": "LoggingPolicy",
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                }
              ],
              "Version": "2012-10-17"
            }
          }
        ]
      }
    },
    "PermalinkRetrieveLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "PermalinkRetrieveLambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "S3Bucket": {
            "Fn::ImportValue": "LambdaBucket"
          },
          "S3Key": "permalink-retrieve-v02.zip"
        },
        "Runtime": "nodejs8.10",
        "Timeout": "300"
      }
    },
    "PermalinkRetrieveLambdaLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": [
            "/aws/lambda/${functionName}",
            {
              "functionName": {
                "Ref": "PermalinkRetrieveLambda"
              }
            }
          ]
        },
        "RetentionInDays": 7
      }
    },
    "PermalinkRetrieveLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PermalinkRetrieveLambda",
            "Arn"
          ]
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Fn::ImportValue": "StationeeringAPI"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "PermalinkResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "ParentId": {
          "Fn::ImportValue": "StationeeringAPIRoot"
        },
        "PathPart": "permalink"
      }
    },
    "LinkPermalinkResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "ParentId": {
          "Ref": "PermalinkResource"
        },
        "PathPart": "{link}"
      }
    },
    "PermalinkRetrieveMethod": {
      "DependsOn": "PermalinkRetrieveLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PermalinkRetrieveLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "$input.json('$.body')"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 200
            },
            {
              "SelectionPattern": "^Not Found.*",
              "ResponseTemplates": {
                "application/json": "{}"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 404
            },
            {
              "SelectionPattern": "^Persistence Failure.*",
              "ResponseTemplates": {
                "application/json": "{}"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 500
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"parameters\": {\"link\": \"$input.params('link')\"}}"
          }
        },
        "RequestParameters": {
          "method.request.path.link": true
        },
        "ResourceId": {
          "Ref": "LinkPermalinkResource"
        },
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": {
                "Ref": "PermalinkModel"
              }
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 200
          },
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 404
          },
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 500
          }
        ]
      }
    },
    "PermalinkPublishMethod": {
      "DependsOn": "PermalinkPublishLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PermalinkPublishLambda",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": "$input.json('$.body')"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 201
            },
            {
              "SelectionPattern": "^Persistence Failure.*",
              "ResponseTemplates": {
                "application/json": "{}"
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 500
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{\"body\": $input.json('$')}"
          }
        },
        "RequestModels": {
          "application/json": {"Ref": "PermalinkModel"}
        },
        "ResourceId": {
          "Ref": "PermalinkResource"
        },
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": {
                "Ref": "PermalinkCreateResponseModel"
              }
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 201
          },
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 500
          }
        ]
      }
    },
    "PermalinkModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "Permalink",
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "Permalink",
          "type": "object",
          "properties": {
            "state": {
              "type": "string"
            }
          },
          "required": [
            "state"
          ]
        }
      }
    },
    "PermalinkCreateResponseModel": {
      "Type": "AWS::ApiGateway::Model",
      "Properties": {
        "ContentType": "application/json",
        "Name": "PermalinkCreateResponse",
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "Schema": {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "PermalinkCreateResponse",
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          },
          "required": [
            "id"
          ]
        }
      }
    },
    "PermalinkPublishCORSOptionMethod": {
      "DependsOn": "PermalinkPublishLambdaPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "IntegrationResponses": [
            {
              "ResponseTemplates": {
                "application/json": ""
              },
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,POST'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "StatusCode": 200
            }
          ],
          "PassthroughBehavior": "NEVER",
          "RequestTemplates": {
            "application/json": "{ \"statusCode\": 200 }"
          }
        },
        "ResourceId": {
          "Ref": "PermalinkResource"
        },
        "RestApiId": {
          "Fn::ImportValue": "StationeeringAPI"
        },
        "MethodResponses": [
          {
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            },
            "StatusCode": 200
          }
        ]
      }
    }
  },
  "Outputs": {}
}
