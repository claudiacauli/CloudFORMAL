{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "SNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "Subscribe for this topic if you want to be notified on AWS CodePipeline Events"
      }
    },
    "LambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "LambdaPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": { "Ref" : "AWS::StackName" },
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:FilterLogEvents",
                "codepipeline:PutJobSuccessResult",
                "codepipeline:PutJobFailureResult",
                "sns:Publish"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "LambdaRole"
          }
        ]
      }
    },
    "CodePipelineNotifications": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "'use strict';",
                "const AWS = require('aws-sdk');",
                "const codepipeline = new AWS.CodePipeline();",
                "const sns = new AWS.SNS();",
                "exports.handler = (event, context, callback) => {",
                " const payload = JSON.parse(event['CodePipeline.job'].data.actionConfiguration.configuration.UserParameters);",
                " const params = {",
   { "Fn::Sub":["   TopicArn: '${TopicArn}',", { "TopicArn": { "Ref": "SNSTopic" }} ] },
                "   Subject: payload.Subject,",
                "   Message: payload.text,",
                "   MessageAttributes: {",
                "     webhook: {",
                "       DataType: 'String',",
                "       StringValue: payload.webhook",
                "     }",
                "   }",
                " };",
                " const jobId = event['CodePipeline.job'].id;",
                " sns.publish(params, (err, data) => {",
                "   if (err) {",
                "     const params = {",
                "       jobId,",
                "       failureDetails: {",
                "         message: JSON.stringify(err),",
                "         type: 'JobFailed',",
                "         externalExecutionId: context.invokeid",
                "       }",
                "     };",
                "     codepipeline.putJobFailureResult(params, (err, data) => {",
                "       if(err) callback(err);",
                "       else callback();",
                "     });",
                "   } else {",
                "     codepipeline.putJobSuccessResult({ jobId }, (err, data) => {",
                "       if(err) callback(err);",
                "       else callback();",
                "     });",
                "   }",
                " });",
                "};"
              ]
            ]
          }
        },
        "Handler": "index.handler",
        "Runtime": "nodejs4.3",
        "Timeout": "30",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "CodePipelineNotifications": {
      "Value": {
        "Ref": "CodePipelineNotifications"
      },
      "Export": {
        "Name": {
          "Ref": "AWS::StackName"
        }
      }
    }
  }
}
