
Infrastructure: 14_joshbalfour, includes StackSets: 
 - joshStackSet 

	StackSet: joshStackSet, includes Templates: 
		Template: fullCfn
		 Parameters: 
			(s3bucketname -> project.name)
			(elbport -> 80)
			(aws::accountid -> 999999999999)
			(getsentryendpoint -> https://1234@app.getsentry.com/1234)
			(elbprotocol -> HTTP)
			(elbhealthchecktarget -> HTTP:80/elb-status)
			(rdbmsdbname -> projectname)
			(emailnotificationsfromname -> project name Notification)
			(keyname -> projectname)
			(asgmaxsize -> 1)
			(rdbmsname -> projectname)
			(rdbmssize -> db.t2.micro)
			(facebookclientid -> 1234)
			(servicedesiredcount -> 1)
			(sourcecidr -> 0.0.0.0/0)
			(emailnotificationsfromuser -> notification)
			(aws::stackname -> fullCfn)
			(aws::notificationarns -> arn:aws:cnc:test:arn)
			(aws::stackid -> 111111)
			(asgminsize -> 1)
			(rdbmsuser -> steve)
			(aws::partition -> aws)
			(aws::region -> us-east-1)
			(gatrackingid -> UA-12345-1)
			(sessionsecret -> change-me-at-somepoint)
			(rdbmspass -> supersecurepassword)
			(ecsinstancetype -> t2.micro)
			(redissize -> cache.t2.micro)
			(ecsport -> 80)
			(aws::urlsuffix -> .aws)
			(facebookclientsecret -> 1234)
		 Mappings: 
			(vpccidrs -> HashMap(us-west-1 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), ap-southeast-1 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), ap-northeast-1 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), eu-west-1 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), ap-southeast-2 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), us-east-1 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), us-west-2 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), sa-east-1 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16)), eu-central-1 -> Right(HashMap(pubsubnet1 -> 10.0.0.0/24, rdbmssubnet2 -> 10.0.3.0/24, rdbmssubnet1 -> 10.0.2.0/24, pubsubnet2 -> 10.0.1.0/24, redissubnet -> 10.0.4.0/24, vpc -> 10.0.0.0/16))))
			(awsregiontoami -> HashMap(eu-central-1 -> Right(Map(amiid -> ami-9aeb0af5)), us-west-1 -> Right(Map(amiid -> ami-b7d5a8d7)), ap-southeast-1 -> Right(Map(amiid -> ami-be63a9dd)), ap-northeast-1 -> Right(Map(amiid -> ami-7e4a5b10)), eu-west-1 -> Right(Map(amiid -> ami-9c9819ef)), ap-southeast-2 -> Right(Map(amiid -> ami-b8cbe8db)), us-east-1 -> Right(Map(amiid -> ami-67a3a90d)), us-west-2 -> Right(Map(amiid -> ami-c7a451a7))))
		 Resources: 
			SNS::Topic(systembussnstopic)
			IAM::AccessKey(snsaccesskey)
			Logs::LogGroup(migrateerrorlog)
			Logs::LogGroup(chaterrorlog)
			IAM::Policy(sesuseriampolicy)
			IAM::User(sqsuser)
			ElastiCache::CacheCluster(redis)
			EC2::SecurityGroup(ecssecuritygroup)
			Logs::LogGroup(routererrorlog)
			IAM::AccessKey(sesuseraccesskey)
			EC2::Route(publicrouteviaigw)
			CloudWatch::Alarm(cpuhighalarm)
			IAM::Policy(snsiampolicy)
			ElasticLoadBalancing::LoadBalancer(ecselasticloadbalancer)
			IAM::Policy(ecselbaccessiampolicy)
			SQS::Queue(notificationsqueue)
			ECS::TaskDefinition(serviceapptaskdefinition)
			IAM::User(snsuser)
			IAM::User(dockerdevuser)
			SQS::Queue(apiqueue)
			EC2::SecurityGroup(rdbmssg)
			IAM::Role(lambdaecsserviceiamrole)
			Logs::LogGroup(routerlog)
			ECR::Repository(taskmigraterepo)
			IAM::Role(iamrole)
			ECR::Repository(serviceuirepo)
			EC2::SubnetRouteTableAssociation(pubsubnet2routetableassociation)
			EC2::SecurityGroup(redissg)
			SNS::Topic(scaledownecsservicesnstopic)
			ECS::TaskDefinition(taskmigratetaskdefinition)
			AutoScaling::AutoScalingGroup(ecsinstanceasg)
			Logs::LogGroup(apilog)
			Logs::LogGroup(chatlog)
			EC2::VPCGatewayAttachment(attachgateway)
			Logs::LogGroup(uierrorlog)
			Logs::LogGroup(apierrorlog)
			S3::Bucket(s3bucket)
			SQS::Queue(chatqueue)
			AutoScaling::ScalingPolicy(asgscaleuppolicy)
			IAM::Role(ecselbaccessrole)
			Lambda::Function(scaleupserviceappservicefunction)
			EC2::SubnetRouteTableAssociation(pubsubnet1routetableassociation)
			EC2::Subnet(pubsubnetaz2)
			EC2::RouteTable(routeviaigw)
			ECS::Service(serviceappservice)
			IAM::Policy(lambdaecsserviceiampolicy)
			CloudWatch::Alarm(cpulowalarm)
			ECR::Repository(serviceapprepo)
			IAM::Policy(dockerdeviampolicy)
			IAM::Policy(sqsiampolicy)
			AutoScaling::LaunchConfiguration(ecsinstancelc)
			AutoScaling::ScalingPolicy(asgscaledownpolicy)
			IAM::AccessKey(sqsaccesskey)
			Logs::LogGroup(migratelog)
			EC2::Subnet(pubsubnetaz1)
			EC2::Subnet(rdbmssubnet2)
			EC2::SecurityGroup(elbsecuritygroup)
			RDS::DBInstance(rdbms)
			RDS::DBSubnetGroup(rdbmssubnetgroup)
			ElastiCache::SubnetGroup(redissubnetgroup)
			ECR::Repository(servicerouterrepo)
			EC2::Subnet(redissubnet)
			EC2::VPC(vpc)
			ECS::Cluster(ecscluster)
			EC2::InternetGateway(internetgateway)
			Logs::LogGroup(uilog)
			SNS::Topic(scaleupecsservicesnstopic)
			IAM::Policy(iampolicy)
			Lambda::Function(scaledownserviceappservicefunction)
			IAM::InstanceProfile(iamroleinstanceprofile)
			EC2::Subnet(rdbmssubnet1)
			IAM::User(sesuser)
			IAM::AccessKey(dockerdevaccesskey)
		 Outputs By ID: 
			(sesuseraccesskey -> IAM::AccessKey(sesuseraccesskey))
			(taskmigraterepo -> ECR::Repository(taskmigraterepo))
			(serviceuirepo -> ECR::Repository(serviceuirepo))
			(s3bucketid -> S3::Bucket(s3bucket))
			(ecsinstanceasgname -> AutoScaling::AutoScalingGroup(ecsinstanceasg))
			(serviceapprepo -> ECR::Repository(serviceapprepo))
			(dockerdevaccesssecret -> dockerdevaccesskey_attribute_secretaccesskey)
			(servicerouterrepo -> ECR::Repository(servicerouterrepo))
			(ecselbname -> ElasticLoadBalancing::LoadBalancer(ecselasticloadbalancer))
			(dockerdevaccesskey -> IAM::AccessKey(dockerdevaccesskey))
			(sesuseraccesssecret -> sesuseraccesskey_attribute_secretaccesskey)
			(rdbmsid -> RDS::DBInstance(rdbms))


