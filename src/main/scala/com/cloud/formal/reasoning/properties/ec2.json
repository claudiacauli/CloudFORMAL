[
  {
    "ID": "11_EKM_SECURITYGROUP_ALL_PORTS_TO_ALL",
    "type": "FTT",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["ec2securitygroup"],
    "instQuery": "securitygroup",
    "propQuery": [
      "(securitygroup_securitygroupingress some (",
      "(ingress_cidrip value \"0.0.0.0/0\") and ",
      "(ingress_fromport value \"0\") and ",
      "(ingress_toport value \"65535\")))"],
    "description": [
      "There might be an EC2::SecurityGroup that",
      " might open all ports to all"],
    "unsatPrint": [
      "Either there are no EC2::SecurityGroups or there are some and they",
      " certainly do not open all ports to all"],
    "sat0print": [
      "There are EC2::SecurityGroup - referenced",
      " by this template - that might open all ports to all"],
    "sat1print": [
      "There is at least one EC2::SecurityGroup",
      " that certainly opens all ports to all"]
  }
,
  {
    "ID": "16_AKM_VPC_NO_DEFAULT_SECURITYGROUP",
    "type": "TFF",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["ec2vpc","ec2securitygroup"],
    "instQuery": "vpc",
    "propQuery": [
      "not( inverse securitygroup_vpcid some securitygroup) "],
    "description": ["No VPC::EC2 should use a default security group ",
        "(all must be explicitly linked to one)"],
    "unsatPrint": "Either there are not VPC::EC2 or there are some and they are all associated with a security group",
    "sat0print": [
      "All declared VPC::EC2 are associated with a security",
    " group - but there are EC2::VPC referenced by this",
      " template that might use a default one"],
    "sat1print": "There is a VPC::EC2 that use a default security group"
  }
,
  {
    "ID": "20_EKM_SECURITYGROUP_OPENTOALL",
    "type": "FTT",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["ec2securitygroup"],
    "instQuery": "securitygroup",
    "propQuery": [
      "(securitygroup_securitygroupingress",
      " some (ingress_cidrip value \"0.0.0.0/0\"))"
    ],
    "description": [
      "There might be an EC2::SecurityGroup that",
      " opens ports to all IPs"],
    "unsatPrint": [
      "Either there are no EC2::SecurityGroups or there are some and",
      " they are certainly not open to all IPs"],
    "sat0print": [
      "There are referenced EC2::SecurityGroups that",
      " might be open to all IPs"],
    "sat1print": [
      "There is at least one EC2::SecurityGroup",
      " that is known to be open to all IPs"]
  }
,
  {
    "ID": "25_EKM_VOLUME_NOT_ENCRYPTED",
    "type": "FTT",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["ec2volume"],
    "instQuery": "ec2volume",
    "propQuery": ["not (volume_encrypted value true)"],
    "description": "There might be an EC2::Volume that is not-encrypted",
    "unsatPrint": "Either there are no EC2::Volumes or there are some and they are all certainly encrypted",
    "sat0print": "There are referenced EC2::Volumes that might be not encrypted",
    "sat1print": "There exists at least one EC2::Volume that is certainly not-encrypted"
  }
,
  {
    "ID": "26_EKM_INSTANCE_PUBLIC",
    "type": "FTT",
    "requiredResourceTypes": ["ec2instance"],
    "queryBuildType": "nominalProp",
    "instQuery": "instance",
    "propQuery": [
      "(instance_networkinterfaces some",
      " (networkinterface_associatepublicipaddress value true))"],
    "description": [
      "There might be an EC2::Instance",
      " that allows public IPs"],
    "unsatPrint": [
      "Either there are not EC2::Instances or there are some and they",
      " certainly do not allow public IPs"],
    "sat0print": [
      "There are EC2::Instances - pointed by",
      " this template - that might allow public IPs"],
    "sat1print": [
      "There is at least one declared EC2::Instance",
      " that allows public IPs"]
  }
,
  {
    "ID": "27_EKM_INSTANCE_USERDATA",
    "type": "FTT",
    "requiredResourceTypes": ["ec2instance"],
    "queryBuildType": "nominalProp",
    "instQuery": "instance and isinstack some stack",
    "propQuery": ["instance_userdata some xsd:string"],
    "description": [
      "There is a template EC2::Instance that",
      " has hard-coded user data"],
    "unsatPrint": [
      "Either there are no EC2::Instances or they don't have user data on template"],
    "sat0print": [
      "There might be EC2::Instances that have user data on template"],
    "sat1print": [
      "There is at least one EC2::Instance",
      " with user data on template"]
  }
,
  {
    "ID": "28_EKM_SECURITY_GROUP_OPEN_PORTS_SELF",
    "type": "FTT",
    "requiredResourceTypes": ["ec2securitygroup"],
    "instQuery": "securitygroup",
    "queryBuildType": "disjunctProp",
    "propQuery": [
      "({${x}} and (securitygroup_securitygroupingress",
      " some ( (ingress_fromport value 0) and (ingress_toport value",
      " 65535) and ( (ingress_sourcesecuritygroupid some {${x}}) or",
      " (ingress_sourcesecuritygroupname some {${x}})))))"],
    "description": [
      "There might be an EC2::SecurityGroup",
      " that opens all ports to self"],
    "unsatPrint": [
      "Either there are no EC2::SecurityGroups or there are some and ",
      " they certainly do not open all ports to self"],
    "sat0print": [
      "There are EC2::SecurityGroups - pointed by this",
      " template - that might open all ports to self"],
    "sat1print": [
      "There is at least one EC2::SecurityGroup that",
      " opens all ports to self"]
  }
,
  {
    "ID": "29_EKM_SECURITYGROUP_UNUSED",
    "type": "FTT",
    "requiredResourceTypes": ["ec2securitygroup"],
    "instQuery": "securitygroup",
    "queryBuildType": "nominalProp",
    "propQuery": [
      "not (securitygroup_vpcid some vpc)"],
    "description": [
      "There might be EC2::SecurityGroup not linked to any VPC"],
    "unsatPrint": [
      "Either there are no EC2::SecurityGroups or there are some and ",
      "they are all linked to a VPC"],
    "sat0print": ["There are EC2::SecurityGroups - pointed by this template - that might not be linked to any Vpc"],
    "sat1print": [
      "There exists at least one EC2::SecurityGroup that is not linked to any VPC"]
  }
,
  {
    "ID": "47_EKM_VPC_OPEN_NETWORK_ACL",
    "type": "FTT",
    "requiredResourceTypes": ["ec2vpc, ec2networkacl"],
    "instQuery": ["vpc"],
    "queryBuildType": "nominalProp",
    "propQuery": [
      "(inverse networkacl_vpcid some (inverse",
      " networkaclentry_networkdaclid some ( (networkaclentry_cidrblock",
      " value \"0.0.0.0/0\") and (networkaclentry_ruleaction value \"allow\") ) ) )"],
    "description": ["There might be an EC2::VPC with",
      " an open-to-all Network Acl"],
    "unsatPrint": ["If there are EC2::VPCs - they certainly",
      " do not have an open-to-all Network Acl"],
    "sat0print": ["There are EC2::VPCs - referenced by this",
      " template - that might have an open-to-all Network Acl"],
    "sat1print": ["There exist at least one EC2::VPC that",
      " has an open-to-all Network Acl"]
  }
,
  {
    "ID": "48_EKM_NETWORKACL_NOT_USED",
    "type": "FTT",
    "requiredResourceTypes": ["ec2networkacl"],
    "instQuery": ["networkacl"],
    "queryBuildType": "nominalProp",
    "propQuery": [
      "not (networkacl_vpcid some vpc)"],
    "description": [
      "There might be some EC2::NetworkAcl not linked to any VPC"],
    "unsatPrint": [
      "Either there are not EC2::NetworkAcl or there are some and they are all linked to a VPC"],
    "sat0print": [
      "There might be EC2::NetworkAcls - linked by this template - that are not linked to a VPC"],
    "sat1print": [
      "There exists at least one EC2::NetworkAcl that is certainly not linked to a VPC"]
  }
,
  {
    "ID": "49_EKM_SUBNET_BAD_ACL",
    "type": "FTT",
    "requiredResourceTypes": ["ec2networkacl","ec2subnet"],
    "instQuery": ["networkacl"],
    "queryBuildType": "nominalProp",
    "propQuery": ["networkacl and not (inverse networkaclentry_networkdaclid",
      " some ( (networkaclentry_cidrblock value \"0.0.0.0/0\") and",
      " (networkaclentry_ruleaction value \"allow\") ) ) and",
      " ((networkacl_vpcid some vpc) or ( inverse",
      " subnetnetworkaclassociation_networkaclid some (subnetid some subnet) ))"],
    "description": [
      "There might be EC2::Subnets with a bad ACL"],
    "unsatPrint": [
      "Either there are no EC2::Subnets or there are some and they all have good ACLs"],
    "sat0print": [
      "There are referenced EC2::Subnets that might have bad ACLs"],
    "sat1print": [
      "There exists at least one EC2::Subnet with bad ACL"]
  }
,
  {
    "ID": "50_EKM_SUBNET_NO_FLOWLOG",
    "type": "FTT",
    "requiredResourceTypes": ["ec2subnet", "ec2flowlog"],
    "instQuery": "subnet",
    "queryBuildType": "nominalProp",
    "propQuery": [
      "(inverse flowlog_resourceid some flowlog)"],
    "description": [
      "There might be EC2::Subnets that have no FlowLog"],
    "unsatPrint": [
      "If there are EC::Subnets - they all have FlowLog"],
    "sat0print": [
      "There are EC2::Subnets referenced by this template that might have no FlowLog"],
    "sat1print": [
      "There exists at least one EC2::Subnet that certainly has no FlowLog"]
  }
]