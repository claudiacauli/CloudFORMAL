[
  {
    "ID": "01_AM_BUCKETS_SHOULD_LOG",
    "type": "TTF",
    "requiredResourceTypes": ["s3bucket"],
    "propQuery": ["bucket and (bucket_loggingconfiguration some",
      " (loggingconfiguration_destinationbucketname some bucket))"],
    "description": ["All S3::Buckets might not keep logs"],
    "unsatPrint": ["If there are S3::Buckets - they certainly do not keep logs"],
    "sat0print": ["If there are S3::Buckets - they might not keep logs"],
    "sat1print": ["There exist at least one S3::Buckets that keep logs"]
  }
,
  {
    "ID": "02_AKM_NO_BUCKETS_STORING_OWN_LOGS",
    "type": "TFF",
    "queryBuildType": "disjunctProp",
    "requiredResourceTypes": ["s3bucket"],
    "instQuery": ["bucket and bucket_loggingconfiguration some ",
      "(loggingconfiguration_destinationbucketname some bucket)"],
    "propQuery": [ "{${x}} and (bucket_loggingconfiguration some ",
      "(loggingconfiguration_destinationbucketname some {${x}}))"],
    "description": ["No S3::Bucket storing logs should ever store its own logs."],
    "unsatPrint": ["All S3::Buckets declared in this template do not store their own logs."],
    "sat0print": ["None of the S3::Bucket declared in the template store their ",
      "own logs but there are buckets referred at by the template for which this information is not known."],
    "sat1print": ["There are S3::Buckets declared in this template that store their own logs."]
  }
,
  {
    "ID": "03_AKM_BUCKET_STORING_LOGS_NOT_PUBLIC",
    "type": "TFF",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["s3bucket"],
    "instQuery": ["bucket and (inverse loggingconfiguration_destinationbucketname some ",
      "( inverse bucket_loggingconfiguration some bucket ))"],
    "propQuery": [
      "( (bucket_accesscontrol value \"public\") or ",
      "(bucket_accesscontrol value \"publicread\") or ",
      "(bucket_accesscontrol value \"publicreadwrite\") )"
    ],
    "description": ["No S3::Bucket used to store logs should ever be public."],
    "unsatPrint": ["No bucket that store logs and is public can be found"],
    "sat0print": ["None of the buckets declared in the template break",
      " this property - but there are buckets outside the ",
      "template for which the information is unknown."],
    "sat1print": ["There are buckets - declared in this template - ",
      "that store logs and are public"]
  }
,
  {
    "ID": "04_AKM_BUCKETS_ENCRYPTED",
    "type": "TFF",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["s3bucket"],
    "instQuery": ["bucket"],
    "propQuery": ["not (",
      "bucket_bucketencryption some (bucketencryption_",
      "serversideencryptionconfiguration some ",
      "(serversideencryptionrule_serversideencryptionbydefault ",
      "some (serversideencryptionbydefault)))",
      ")"],
    "description": ["All S3::Buckets must be encrypted"],
    "unsatPrint": ["All known S3::Buckets are indeed encrypted."],
    "sat0print": ["None of the S3::Buckets declared in the template is not encrypted.",
      " But there are buckets pointed by the template for which this info is not known."],
    "sat1print": ["There are S3::Buckets - declared in this template - that are not encrypted."]
  }
,
  {
    "ID": "05_AKM_BUCKET_NOT_PUBLIC_UNLESS_WEBSITE_OR_CORS",
    "type": "TFF",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["s3bucket"],
    "instQuery" : ["bucket"],
    "propQuery": [
      "( (bucket_accesscontrol value \"public\") or ",
      "(bucket_accesscontrol value \"publicread\") or ",
      "(bucket_accesscontrol value \"publicreadwrite\") ) ",
      " and not (",
      "(bucket_websiteconfiguration some websiteconfiguration)",
      " or (bucket_corsconfiguration some corsconfiguration)",
      ")"
    ],
    "description": [ "Only S3::Buckets that host a website or allow Cross-Origin sharing can be public."],
    "unsatPrint": ["No bucket that does not host a website or allow CORS and is public can be found."],
    "sat0print": ["None of the buckets declared in the ",
      "template break this property - but there ",
      "are buckets pointed by it for which the information is unknown."],
    "sat1print": ["There are buckets declared in the template ",
      "that do not host a website or allow CORS and are public."]
  }
,
  {
    "ID": "06_AKM_CRITICAL_LAMBDA_BUCKETS_ENCRYPTED_ROTATING",
    "type": "TFF",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["s3bucket","lambdafunction"],
    "instQuery": ["bucket and (",
      "(inverse code_s3bucket some (inverse function_code some function)) )"],
    "propQuery": [
      "not (",
      "(bucket_loggingconfiguration some (loggingconfiguration_destinationbucketname some ",
        "(bucket_bucketencryption some (bucketencryption_serversideencryptionconfiguration ",
      "some (serversideencryptionrule_serversideencryptionbydefault some ",
      "((serversideencryptionbydefault_ssealgorithm value \"aws:kms\") and ",
      "(serversideencryptionbydefault_kmsmasterkeyid some key)))))",
      ")) and (",
      "bucket_bucketencryption some (bucketencryption_serversideencryptionconfiguration ",
      "some (serversideencryptionrule_serversideencryptionbydefault some ",
      "((serversideencryptionbydefault_ssealgorithm value \"aws:kms\") and ",
      "(serversideencryptionbydefault_kmsmasterkeyid some key))))",
      "))"
    ],
    "description": ["All S3::Buckets storing Lambda code ",
      "must be encrypted and keep logs in an encrypted bucket."],
    "unsatPrint": ["All S3::Bucket declared in the template are ",
      "encrypted and keep logs whenever they store lambda code."],
    "sat0print": ["None of the S3::Buckets declared in the template breaks this ",
      "property - but there are buckets pointed by the template for which this information is not known."],
    "sat1print": ["There are S3::Buckets in this template that are not ",
      "encrypted or do not keep logs despite storing lambda code."]
  },
  {
    "ID": "07_AKM_LOGS_STORED_ON_ENCRYPTED_BUCKETS",
    "type": "TFF",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["s3bucket"],
    "instQuery": ["bucket and (inverse loggingconfiguration_destinationbucketname some ",
      "( inverse bucket_loggingconfiguration some bucket ))"],
    "propQuery": ["not (",
      "bucket_loggingconfiguration some (loggingconfiguration_destinationbucketname some ",
      "(bucket_bucketencryption some (bucketencryption_serversideencryptionconfiguration ",
      "some (serversideencryptionrule_serversideencryptionbydefault some ",
      "((serversideencryptionbydefault_ssealgorithm value \"aws:kms\") and ",
      "(serversideencryptionbydefault_kmsmasterkeyid some key)))))))"],
    "description": "All S3::Buckets that store logs must be encrypted",
    "unsatPrint": "All S3::Buckets known to store logs are encrypted",
    "sat0print": ["None of the buckets declared in this template break this ",
      "property - but there are buckets pointed at by this template for which the information is not known"],
    "sat1print": ["There are S3::Buckets in this template that store logs and are not encrypted"]
  }
    ,
  {
    "ID": "49_AKM_BUCKETS_VERSIONING",
    "type": "TFF",
    "queryBuildType": "nominalProp",
    "requiredResourceTypes": ["s3bucket"],
    "instQuery": ["bucket"],
    "propQuery": ["not (",
      "bucket_versioningconfiguration some (versioningconfiguration_status value \"enabled\"))"],
    "description": ["All S3::Buckets must have versioning enabled"],
    "unsatPrint": ["All S3::Buckets have versioning enabled"],
    "sat0print": ["None of the S3::Buckets declared have versioning disabled ",
      " - but there are buckets pointed by the template for which this info is not known"],
    "sat1print": ["There are S3::Buckets - declared in this template - that have versioning disabled"]
  }
]