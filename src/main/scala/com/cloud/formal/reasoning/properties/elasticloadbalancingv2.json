[
  {
    "ID": "31_AKM_LOADBALANCER_S3ACCESSLOGS",
    "type": "TFF",
    "requiredResourceTypes": ["elasticloadbalancingv2loadbalancer"],
    "queryBuildType": "nominalProp",
    "instQuery": ["loadbalancer"],
    "propQuery": [
      "not (loadbalancer_loadbalance",
      "rattributes some (loadbalancerattribute_key value \"acc",
      "ess_logs.s3.enabled\") and (loadbalancerattribute_value",
      " value true)) "],
    "description": [
      "All ElasticLoadBalancingv2::LoadBalancers",
      " should have S3 Access Logs enabled"],
    "unsatPrint": [
      "Either there is no ElasticLoadBalancingv2::LoadBalancer or there are some and they all ",
      " have S3 Access Logs enabled"],
    "sat0print": [
      "There is an ElasticLoadBalancingv2::LoadBalancer - pointed by this template - ",
      "that might have S3 Access Logs disabled"],
    "sat1print": [
      "There is at least one ElasticLoadBalancingv2::LoadBalancer",
      " that certainly has S3 Access Logs disabled"]
  }
,
  {
    "ID": "32_AKM_LOADBALANCER_DELETION_PROTECTED",
    "type": "TFF",
    "requiredResourceTypes": ["elasticloadbalancingv2loadbalancer"],
    "queryBuildType": "nominalProp",
    "instQuery": ["loadbalancer"],
    "propQuery": [
      "not (loadbalancer_",
      "loadbalancerattributes some (loadbalancerattribute_key",
      " value \"deletion_protection.enabled \") and ",
      "(loadbalancerattribute_value value true)) "],
    "description": [
      "All ElasticLoadBalancingv2::LoadBalancers must have",
      " Deletion Protection enabled"],
    "unsatPrint": [
      "All ElasticLoadBalancingv2::LoadBalancers - if any -",
      " certainly have deletion protection enabled"],
    "sat0print": [
      "There are ElasticLoadBalancingv2::LoadBalancers -",
      " pointed by this template - that might not have",
      " deletion protection enabled"],
    "sat1print": [
      "There exists at least one ElasticLoadBalancingv2::LoadBalancer",
      " that certainly has deletion protection disabled"]
  }
,
  {
    "ID": "33_AKM_LISTENER_NO_OLD_POLICIES",
    "type": "TFF",
    "requiredResourceTypes": ["elasticloadbalancingv2listener"],
    "queryBuildType": "nominalProp",
    "instQuery": ["listener"],
    "propQuery": [
      "((listener_sslpolicy value",
      " \"ELBSecurityPolicy-2016-08\") or (listener_sslpolicy",
      " value \"ELBSecurityPolicy-FS-2018-06\") or (listener_sslpolicy",
      " value \"ELBSecurityPolicy-TLS-1-1-2017-01\") or (listener_sslpolicy",
      " value \"ELBSecurityPolicy-TLS-1-2-2017-01\") or (listener_sslpolicy",
      " value \"ELBSecurityPolicy-TLS-1-2-Ext-2018-06\"))"],
    "description": [
      "All LoadBalancingV2::Listeners must not",
      " use old SSL policies"],
    "unsatPrint": [
      "All LoadBalancingV2::Listeners - if any -",
      " certainly do not use old SSL policies"],
    "sat0print": [
      "There are LoadBalancingV2::Listeners - pointed",
      " by this template - that might use old SSL policies"],
    "sat1print": [
      "There exists at least one LoadBalancingV2::Listener",
      " that uses old SSL policies"]
  }
]